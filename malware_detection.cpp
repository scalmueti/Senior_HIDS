#include "malware_detection.h"
#include <iostream>
#include <fstream>
#include <vector>
#include <string>
#include <filesystem>
#include <algorithm>
#include <sqlite3.h>

namespace fs = std::filesystem;


std::vector<MalwareSignature> loadSignatures(const std::string& dbPath) {
    sqlite3* db;
    sqlite3_stmt* stmt;
    std::vector<MalwareSignature> signatures;
    
    if (sqlite3_open(dbPath.c_str(), &db) == SQLITE_OK &&
        sqlite3_prepare_v2(db, "SELECT malwareName, malwareSignature FROM malware_signatures;", -1, &stmt, nullptr) == SQLITE_OK) {
        
        while (sqlite3_step(stmt) == SQLITE_ROW) {
            MalwareSignature sig;
            sig.malwareName = reinterpret_cast<const char*>(sqlite3_column_text(stmt, 0));
            sig.signature = reinterpret_cast<const char*>(sqlite3_column_text(stmt, 1));
            signatures.push_back(sig);
        }
        
        sqlite3_finalize(stmt);
    } else {
        std::cerr << "SQLite error: " << sqlite3_errmsg(db) << std::endl;
    }

    sqlite3_close(db);
    return signatures;
}

bool scanFile(const std::string& filePath, const std::vector<MalwareSignature>& signatures) {
    std::ifstream file(filePath, std::ios::binary);
    if (!file) {
        return false;
    }
    
    std::string content((std::istreambuf_iterator<char>(file)), std::istreambuf_iterator<char>());

    std::cout << "Scanning: " << filePath << "\n";
    std::cout << "File Content Preview: " << content.substr(0, 100) << "...\n";

    for (const auto& sig : signatures) {
        std::cout << "Checking Signature: " << sig.malwareName << "\n";
        if (content.find(sig.signature) != std::string::npos) {
            std::cout << "Warning: Malware signature found in " << filePath << "!\n";
            return true;
        }
    }
    
    return false;
}

void scanDirectory(const std::string& dirPath, const std::vector<MalwareSignature>& signatures) {
    for (const auto& entry : fs::recursive_directory_iterator(dirPath)) {
        if (fs::is_regular_file(entry.path())) {
            scanFile(entry.path().string(), signatures);
        }
    }
}

void scan_malware() {
    std::string dbPath = "malware_db.db";  
    std::string targetDir = "C:\\Users\\Public\\Test\\"; 
    
    std::vector<MalwareSignature> signatures = loadSignatures(dbPath);
    if (signatures.empty()) {
        std::cerr << "No signatures loaded. Exiting.\n";
        return;
    }

    std::cout << "Scanning directory: " << targetDir << "\n";
    scanDirectory(targetDir, signatures);

    std::cout << "Scan complete.\n";
}